syntax = "proto3";

// TODO: add protobuf linter and dependency manager, change the Product message field
// ref: https://medium.com/stackpulse/grpc-in-practice-directory-structure-linting-and-more-d4d438ac4f86
package bookstore;

import "google/protobuf/timestamp.proto";

/* set where the generate Go code will be placed */
option go_package = "domain";

// ---------------Product---------------------------------------------------

// ProductService definition to handle our products.
service ProductService {
  rpc AddProduct (AddProductRequest) returns (AddProductResponse);
  // rpc UpdateProduct (UpdateProductRequest) returns (UpdateProductResponse);
}

message Product {
  // @inject_tag: gorm:"primaryKey;autoIncrement"
  uint64 id = 1;
  // @inject_tag: gorm:"type:uuid;unique;default:uuid_generate_v4()"

  // protobuf doesn't have support for UUID yet.
  // https://github.com/protocolbuffers/protobuf/issues/2224
  string uuid = 2;
  string name = 3;
  string description = 4;
  double price = 5;
  string slug = 6;
  bool inactive = 7;
  uint64 quantity = 8;

  // Product will have a one-to-one relationship with product image
  // @inject_tag: `gorm:"foreignKey;"`
  ProductImage image_id = 9;

  // We need to have an array of categories that can be used to search a product
  // @inject_tag: `gorm:"many2many:product_categories;"`
  repeated Category categories = 10;

  // @inject_tag: gorm:"type:timestamp"
  Timestamp created_at = 11;
  // @inject_tag: gorm:"type:timestamp"
  Timestamp updated_at = 12;
  // @inject_tag: gorm:"type:timestamp"
  Timestamp deleted_at = 13;
}

message Category {
 // @inject_tag: gorm:"primaryKey;autoIncrement"
  uint64 id = 1;
  string name = 2;
}

message Timestamp {
  google.protobuf.Timestamp timestamp = 1;
}

message AddProductRequest {
  Product product = 1;
}

message AddProductResponse {
  Product created_product = 1;
}

// message UpdateProductRequest {
//   Product product = 1;
// }

// message UpdateProductResponse {
//   Product updated_product = 1;
// }

// ---------------Product Image---------------------------------------------------
// ProductImageService definition to handle our products images.
service ProductImageService {
  rpc UploadImage (stream UploadImageRequest) returns (UploadImageResponse);
}

message ProductImage {
  // @inject_tag: gorm:"primaryKey;autoIncrement"
  uint64 id = 1;
  string image_url = 2;
}

/*
The idea is to divide the image file into multiple chunks, and send them
one by one to the server in each request message. We use a oneof field
here because the first request will only contain the metadata i .e the product id
the image belongs to and the image data. Then the following requests will contain
the image data chunks.
*/
message UploadImageRequest {
  oneof data {
    ImageInfo info = 1;
    bytes image_chunk = 2;
  }
}

message ImageInfo {
  uint64 product_id = 1;
  string image_format = 2;
}

message UploadImageResponse {
  string image_url = 1;
}